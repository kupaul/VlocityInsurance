/*! Built with http://stenciljs.com */
VlocityTemplateEditor.loadBundle("help-modal",["exports"],function(e){var t=window.VlocityTemplateEditor.h,a=function(){function e(){}return e.prototype.getJsHelpContent=function(){return'<br><div class="slds-m-top_large">\n           <div class="slds-text-heading_small slds-m-bottom_x-small">Javascript </div> <div class="slds-m-bottom_x-small">Please use vlocity.cardframework.registerModule to register your Angular Module:</div>\n           <br/>\n           <div class="slds-text-heading_small">Controller :</div>\n           <pre>vlocity.cardframework.registerModule.controller(\'myappHomeProductController\', [\'$scope\', function($scope) {<br>// Your code goes here<br>}]);</pre>\n           <div class="slds-text-heading_small">Service :</div> Note : If you want to inject a service inside the registered controller then you have to register the service before controller.\n           <br/><br/>\n           <pre>vlocity.cardframework.registerModule.service(\'myTestService\', [function() {<br>// Your code goes here<br>}]);</pre>\n           <div class="slds-text-heading_small">Factory :</div> Note : If you want to inject a factory inside the registered controller then you have to register the factory before controller.\n           <br/><br/>\n           <pre>vlocity.cardframework.registerModule.factory(\'myTestFactory\', [function() {<br>// Your code goes here<br>}]);</pre>\n           <div class="slds-text-heading_small">Directive :</div>\n           <pre>vlocity.cardframework.registerModule.directive("myTestDirective", function() {<br>// Your code goes here<br>});</pre> \n           Now we can use the directive in our html page using <code>my-test-directive</code> as an Element, Attribute or Class as per our configuration.\n           <br/>\n           <div class="slds-text-heading_small">Filter :</div>\n           <pre>vlocity.cardframework.registerModule.filter("myTestFilter", function() {<br>// Your code goes here<br>});</pre> \n           Now we can use the filter in our html page as <code>{{ "Vlocity" | myTestFilter }}</code>\n        </div>'},e.prototype.getCssHelpContent=function(){return'<br><div class="slds-m-top_large">\n        <div class="slds-text-heading_small slds-m-bottom_x-small">SASS/CSS</div> \n        <p class="slds-m-bottom_x-small">\n          Template designer supports both SASS and CSS. <b>But we strongly recommend to use only \'SASS\' and adhere to the \'SMACSS\' principles. This helps in Scalable and Modular Architecture for CSS.</b> In other words, you don\'t have to worry about leaky styles if you follow the guidelines. \n        </p>\n        <p class="slds-m-bottom_x-small">\n          Stylesheets are getting larger, more complex, and harder to maintain. This is where a preprocessor can help. \n          SASS lets you use features that don\'t exist in CSS yet like variables, nesting, mixins, inheritance and few others.<br/>\n       \n        Once you start tinkering with SASS, it will take your preprocessed SASS file and save it as a normal CSS file that gets used on the app/site. \n        </p> \n       \n        <pre class="slds-m-bottom_x-small">/*** VARIABLES ***/<br>@import "my-variables";<br><br>/*** MIXINS ***/<br>@import "my-mixin";<br>/*** STYLES ***/<br>.vlocity {   /* Always use vlocity class as a wrapper */<br>   .myapp-home-product-template { /* Always use template specific unique class, follow the template name */<br>     /* Your code goes here */<br>   }   <br>}</pre> \n        <p class="slds-m-bottom_x-small"> \n          Note: \n          <ul class="slds-list_dotted slds-m-bottom_x-small"> \n            <li><code>vlocity</code> class is needed as a wrapper to inherit the vlocity styles and to isolate styles to only vlocity apps.</li> \n            <li>Template specific unique classes are needed to avoid styles from leaking into other templates or components. Templates always have the unique name, it\'s good to follow the same naming convention.</li> \n          </ul> \n        </p> \n        <b>How to create and use \'variables\' and \'mixins\'?</b> \n        <ol class="slds-list_ordered slds-m-bottom_x-small"> \n          <li>Create the mixins or variables</li> \n          <li>Refresh the entire page(template designer). This needs to be done so that all templates have access to the new files</li> \n          <li>Go to any SASS/CSS file and use mixin/variable by importing it</li>\n        </ol>\n        <b>Note:</b> When you update the Mixin/Variables, you need to save all the templates again as SASS needs to be preprocessed across all templates. SASS is preprocessed and saved as CSS when you save the templates.\n        <p class="slds-m-bottom_x-small"> \n          <br/>Read More:\n          <br/> \n          <ul> \n            <li><a href="http://sass-lang.com" target="_blank">SASS</a></li> \n            <li><a href="https://smacss.com" target="_blank">SMACSS</a></li> \n          </ul>\n        </p>\n      </div>'},e.prototype.getHtmlHelpContent=function(){return"<br><div>\n          <div class=\"slds-m-top_large slds-text-heading_small slds-p-bottom_x-small\">HTML</div>\n         <p class=\"slds-p-bottom_x-small\">\n            HTML templates support all the standard HTML structures(DOM).<br/>\n            Templates can't have the <code>html</code> or <code>body</code> tags as it's embedded into a page which already has html/body tags.\n          </p>\n      \n         Template names are unique.<br/>\n          <b>Naming convention:</b> {appname}-{featurename}-{sub-feature}<br/>\n          Eg: myapp-home-product, myapp-home-kitchen-sink<br/><br/>\n       \n          Always have the unique class name on the root element in the HTML template. This unique class needs to be used in respective SASS/CSS <br/><br/>\n          <pre>&lt;!-- Template: myapp-home-kitchen-sink --&gt;<br>&lt;div class=&quot;myapp-home-kitchen-sink&quot;&gt;<br>&lt;h2&gt;Title&lt;h2&gt;<br>&lt;div&gt;Template Body&lt;/div&gt;<br>&lt;/div&gt;</pre>\n          <br/>\n          <b>Note:</b> Whenever you're cloning or copying the templates, ensure that you rename the root level class('myapp-home-kitchen-sink' in above example). If not renamed, same class name will be used across multiple templates and styles gets leaked.\n      </div>"},e.prototype.getKeyboardHelpContent=function(){return'<br><div class="slds-m-top_large slds-text-heading_small slds-p-bottom_x-small">Keyboard Shortcuts</div>\n      <ul class="slds-list_dotted slds-m-bottom_x-small">\n      <li>HELP -- <code>Command/Ctrl + H</code></li>\n      <li>SAVE -- <code>Command/Ctrl + S</code></li>\n      <li>OPEN TEMPLATE -- <code>Command/Ctrl + O</code></li>\n      <li>SHOW HTML -- <code>Command/Ctrl + 1</code></li>\n      <li>SHOW CSS -- <code>Command/Ctrl + 2</code></li>\n      <li>SHOW JS -- <code>Command/Ctrl + 3</code></li>\n      <li>SHOW EDIT -- <code>Command/Ctrl + 4</code></li>\n      <li>SHOW PREVIEW -- <code>Command/Ctrl + Shift + P</code></li>\n      <li>TOGGLE ACTIVEs -- <code>Command/Ctrl + Shift + A</code></li>\n      <li>CLOSE -- <code>Esc</code></li>\n      </ul>'},e.prototype.activateTab=function(e){var t=e.target,a="";t.getAttribute("data-tabId")&&(a=document.getElementsByTagName("li"),[].forEach.call(a,function(e){e.classList.remove("slds-is-active")}),t.parentNode.classList.add("slds-is-active"),a=document.getElementsByClassName("tab-content"),[].forEach.call(a,function(e){e.classList.remove("slds-show"),e.classList.add("slds-hide")}),document.getElementById(t.getAttribute("data-tabId")).classList.remove("slds-hide"),document.getElementById(t.getAttribute("data-tabId")).classList.add("slds-show"))},e.prototype.render=function(){var e=this;return t("div",{class:"slds-tabs_default"},t("ul",{class:"slds-tabs_default__nav  custom-tab",id:"tabSelect",role:"tablist"},t("li",{class:"slds-tabs_default__item slds-is-active",title:"Item One",role:"presentation"},t("a",{"data-tabId":"tab1",onClick:function(t){return e.activateTab(t)},class:"slds-tabs_default__link",href:"javascript:void(0);",role:"tab",tabindex:"0","aria-selected":"true","aria-controls":"tab-default-1",id:"tab-default-1__item"},"HTML")),t("li",{class:"slds-tabs_default__item",title:"Item Two",role:"presentation"},t("a",{"data-tabId":"tab2",onClick:function(t){return e.activateTab(t)},class:"slds-tabs_default__link",href:"javascript:void(0);",role:"tab",tabindex:"-1","aria-selected":"false","aria-controls":"tab-default-2",id:"tab-default-2__item"},"CSS/SCSS")),t("li",{class:"slds-tabs_default__item",title:"Item Two",role:"presentation"},t("a",{"data-tabId":"tab3",onClick:function(t){return e.activateTab(t)},class:"slds-tabs_default__link",href:"javascript:void(0);",role:"tab",tabindex:"-1","aria-selected":"false","aria-controls":"tab-default-3",id:"tab-default-3__item"},"Javascript")),t("li",{class:"slds-tabs_default__item",title:"Item Two",role:"presentation"},t("a",{"data-tabId":"tab4",onClick:function(t){return e.activateTab(t)},class:"slds-tabs_default__link",href:"javascript:void(0);",role:"tab",tabindex:"-1","aria-selected":"false","aria-controls":"tab-default-4",id:"tab-default-4__item"},"Keyboard Shortcuts"))),t("div",{id:"tab1",class:"slds-tabs_default__content tab-content slds-show",role:"tabpanel","aria-labelledby":"tab-default-1__item",innerHTML:this.getHtmlHelpContent()}," "),t("div",{id:"tab2",class:"slds-tabs_default__content tab-content slds-hide",role:"tabpanel","aria-labelledby":"tab-default-2__item",innerHTML:this.getCssHelpContent()}," "),t("div",{id:"tab3",class:"slds-tabs_default__content tab-content slds-hide",role:"tabpanel","aria-labelledby":"tab-default-3__item",innerHTML:this.getJsHelpContent()}),t("div",{id:"tab4",class:"slds-tabs_default__content tab-content slds-hide",role:"tabpanel","aria-labelledby":"tab-default-4__item",innerHTML:this.getKeyboardHelpContent()}))},Object.defineProperty(e,"is",{get:function(){return"help-modal"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"style",{get:function(){return""},enumerable:!0,configurable:!0}),e}();e.HelpModal=a,Object.defineProperty(e,"__esModule",{value:!0})});